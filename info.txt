Para correr el docker-compose.yml:
docker-compose build

-----
---para entrar en el contenedor como root:
docker-compose run --rm --service-ports backend bash
#
Este comando levantara el proceso de la base de datos
Desde dentro podemos crear el proyecto: django-admin startproject [name]
Cambiar el nombre del directorio del proyecto a src
crear una aplicacion principal: python manage.py startapp [name]
configurar el proyecto como queramos: project_name/settings.py
Si se necesita cambiar el due√±o de los directorios/archivos:
sudo chown -R $USER:$USER .
#

--- para entrar en el container como usuario app:
docker-compose run --rm --service-ports backend - bash
# los directorios pertenesen a $USER (el nombre del volumen 'app') y no a root

--- significados de banderas:
--rm borrar el contenedor al terminar
--service-ports abrir los puertos entre host y container

--- para correr el servidor:
docker-compose run --rm --service-ports backend
# en el docker-compose.yml esta el commando runserver


-----
--- para levantar la base de datos:
docker-compose up database
# con la bandera -d, (detach) es para correr en back

--- para ver lo que ha generado el service database
docker-compose logs database

--- entrar en postgresql para interactuar en la terminal:
docker-compose exec database psql -U [username] template1

--- significado de comandos:
- exec ejecutar dentro del contenedor en backdoor
- (database) nombre del servicio
- psql comando de postgres
-U user (el usuario por default es postgres)
- template1 nombre en el prompt

--- para apagar los contenedores:
docker-compose down database
docker-compose down backend

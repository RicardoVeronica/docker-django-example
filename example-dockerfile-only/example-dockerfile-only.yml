FROM python:3.6.3-slime

# meta-data
LABEL maintainer="name <name@mail.com>"
      description="little description here"

# set the working directory to /app into container
WORKDIR /app

# copy the current directory contents into the container at /app
COPY . /app

# install the required libraries
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# set /app directory the volume into the container
VOLUME ["/app"]

# make port 8000 available outside the container
EXPOSE 8000

# indicates the principal comand of the image
ENTRYPOINT ["python"]

# principal parameters for ENTRYPOINT
CMD ["manage.py", "runserver", "0.0.0.0:8000"]


# para crear la imagen: docker build -t [image_name] .
# -t [tag] es para darle un nombre a la imagen que vamos a crear
# se puede hacer build las veces que sea necesario al modificar el Dockerfile
#
# para correr la imagen y entrar en ella (crear proyecto)
# docker run --rm -it -v $(pwd):/app --entrypoint [id_image]
# --rm remover el contenedor que se crea
# -it terminal interactiva dentro de la imagen
# -v mapear volumen host:workdir
# -- entrypoint se modifica el comando de inicial de la imagen
#
# para correr la imagen (por defecto corre el servidor de desarrollo)
# docker run --rm -v $(pwd):/app -p 8000:8000 - w /app/src [image_name]
# -p mapear puertos host:imagen
# -w ruta absoluta del working directory (incluyendo el directorio de nuesta app)
#
# para pasar parametros de python por el ENTRYPOINT
# docker run --rm -v $(pwd):/app [image_name] manage.py startapp [app_name]
#
# todos los dir y files son de root, cambiar los permisos
# sudo chown -R $USER:$USER .
# -R recursivamente
# $USER:$USER usuario:grupo
